---
- name: Развертывание Простого Flask-сайта
  hosts: web_servers
  become: yes
  gather_facts: false # Оставляем отключенным, так как это вызывало проблемы

  tasks:
    # --- ЗАДАЧИ, КОТОРЫЕ МЫ ОТЛАЖИВАЛИ (ОСТАВЛЯЕМ) ---
    - name: Убедиться, что python3-apt установлен для модулей Ansible (используя raw)
      raw: sudo apt update && sudo apt install -y python3-apt python3-pip
      args:
        warn: no
      changed_when: false

    - name: Обновить системные пакеты (используя shell для обхода проблемы с apt)
      ansible.builtin.shell: |
        sudo apt update
        sudo apt upgrade -y
        sudo apt autoremove -y
      args:
        warn: no
      changed_when: true

    # --- НОВЫЕ/ВОССТАНОВЛЕННЫЕ ЗАДАЧИ ДЛЯ РАЗВЕРТЫВАНИЯ FLASK ---

    - name: Установка зависимостей Python и других пакетов
      ansible.builtin.apt:
        name:
          - git # Для клонирования репозитория
          - nginx # Веб-сервер
          - uwsgi # WSGI сервер
          - uwsgi-plugin-python3 # Плагин UWSGI для Python 3
          - python3-venv # Для создания виртуального окружения
        state: present
        update_cache: yes # Убедимся, что кэш обновлен

    - name: Клонирование или обновление репозитория Flask-приложения
      ansible.builtin.git:
        repo: 'https://https://github.com/DelayDelo123/my_flask_project' # <--- ЗАМЕНИТЕ НА СВОЙ РЕПОЗИТОРИЙ!
        dest: '/home/user/my_flask_project' # <--- ПУТЬ К ПРОЕКТУ НА SLAVE-ВМ
        version: main # Или другая ветка, если нужно
        force: yes # Для обновления, если уже существует
      become_user: user # Выполнить от имени пользователя на Slave-ВМ (например, 'user')

    - name: Создание виртуального окружения Python
      ansible.builtin.shell: "python3 -m venv /home/user/my_flask_project/venv"
      args:
        creates: /home/user/my_flask_project/venv/bin/pip # Убедимся, что не создаем заново
      become_user: user

    - name: Установка зависимостей Flask из requirements.txt
      ansible.builtin.pip:
        requirements: "/home/user/my_flask_project/requirements.txt"
        virtualenv: "/home/user/my_flask_project/venv"
      become_user: user

    - name: Копирование файла конфигурации Nginx
      ansible.builtin.template:
        src: nginx_site.conf.j2 # Имя файла шаблона Nginx в вашем проекте
        dest: /etc/nginx/sites-available/flask_app
        mode: '0644'
      notify: Перезагрузить Nginx

    - name: Создание символической ссылки на конфигурацию Nginx
      ansible.builtin.file:
        src: /etc/nginx/sites-available/flask_app
        dest: /etc/nginx/sites-enabled/flask_app
        state: link
      notify: Перезагрузить Nginx

    - name: Удаление ссылки на дефолтную конфигурацию Nginx
      ansible.builtin.file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: Перезагрузить Nginx

    - name: Копирование файла systemd-сервиса UWSGI
      ansible.builtin.template:
        src: flask_app.service.j2 # Имя файла шаблона сервиса UWSGI в вашем проекте
        dest: /etc/systemd/system/flask_app.service
        mode: '0644'
      notify: Перезапустить UWSGI сервис

    - name: Включение и запуск systemd-сервиса UWSGI
      ansible.builtin.systemd:
        name: flask_app
        state: started
        enabled: yes
        daemon_reload: yes # Важно после добавления нового сервиса

  handlers:
    - name: Перезагрузить Nginx
      ansible.builtin.systemd:
        name: nginx
        state: restarted

    - name: Перезапустить UWSGI сервис
      ansible.builtin.systemd:
        name: flask_app
        state: restarted
        daemon_reload: yes # Важно, если были изменения в файле сервиса
