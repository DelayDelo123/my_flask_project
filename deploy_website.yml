---
- name: Развертывание Простого Flask-сайта
  hosts: web_servers
  become: yes
  gather_facts: false

  tasks:
    # Эти задачи оставляем без изменений, они работают
    - name: Убедиться, что python3-apt установлен для модулей Ansible (используя raw)
      raw: sudo apt update && sudo apt install -y python3-apt python3-pip
      args:
        warn: no
      changed_when: false

    - name: Обновить системные пакеты (используя shell для обхода проблемы с apt)
      ansible.builtin.shell: |
        sudo apt update
        sudo apt upgrade -y
        sudo apt autoremove -y
      args:
        warn: no
      changed_when: true

    # ЭТУ ЗАДАЧУ МЕНЯЕМ НА SHELL:
    - name: Установка зависимостей Python и других пакетов (используя shell)
      ansible.builtin.shell: |
        sudo apt install -y git nginx uwsgi uwsgi-plugin-python3 python3-venv
      args:
        warn: no
      changed_when: true # Считаем, что это всегда может привести к изменению

    # --- Остальные задачи плейбука (клонирование Git, создание venv, pip install) ---
    # ОСТАВЬТЕ ВСЕ ОСТАЛЬНЫЕ ЗАДАЧИ НИЖЕ БЕЗ ИЗМЕНЕНИЙ,
    # так как они используют модули (git, pip, template, file, systemd),
    # которые обычно не имеют проблем с этой ошибкой _cffi_backend_
    # (или мы с ними еще не столкнулись)

    - name: Клонирование или обновление репозитория Flask-приложения
      ansible.builtin.git:
        repo: 'https://github.com/DelayDelo123/my_flask_project.git' # <--- ЗАМЕНИТЕ НА СВОЙ РЕПОЗИТОРИЙ!
        dest: '/home/user/my_flask_project'
        version: master
        force: yes
      become_user: user

    - name: Создание виртуального окружения Python
      ansible.builtin.shell: "python3 -m venv /home/user/my_flask_project/venv"
      args:
        creates: /home/user/my_flask_project/venv/bin/pip
      become_user: user

    - name: Установка зависимостей Flask из requirements.txt
      ansible.builtin.pip:
        requirements: "/home/user/my_flask_project/requirements.txt"
        virtualenv: "/home/user/my_flask_project/venv"
      become_user: user

    - name: Копирование файла конфигурации Nginx
      ansible.builtin.template:
        src: nginx_site.conf.j2
        dest: /etc/nginx/sites-available/flask_app
        mode: '0644'
      notify: Перезагрузить Nginx

    - name: Создание символической ссылки на конфигурацию Nginx
      ansible.builtin.file:
        src: /etc/nginx/sites-available/flask_app
        dest: /etc/nginx/sites-enabled/flask_app
        state: link
      notify: Перезагрузить Nginx

    - name: Удаление ссылки на дефолтную конфигурацию Nginx
      ansible.builtin.file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: Перезагрузить Nginx

    - name: Копирование файла systemd-сервиса UWSGI
      ansible.builtin.template:
        src: flask_app.service.j2
        dest: /etc/systemd/system/flask_app.service
        mode: '0644'
      notify: Перезапустить UWSGI сервис

    - name: Включение и запуск systemd-сервиса UWSGI
      ansible.builtin.systemd:
        name: flask_app
        state: started
        enabled: yes
        daemon_reload: yes

  handlers:
    - name: Перезагрузить Nginx
      ansible.builtin.systemd:
        name: nginx
        state: restarted

    - name: Перезапустить UWSGI сервис
      ansible.builtin.systemd:
        name: flask_app
        state: restarted
        daemon_reload: yes
