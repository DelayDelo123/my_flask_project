---
- name: Развертывание Flask-сайта с Docker Compose
  hosts: web_servers
  become: yes
  gather_facts: false # Отключаем сбор фактов, чтобы избежать возможных проблем с Python на ранних этапах

  vars:
    ansible_python_interpreter: /usr/bin/python3 # Оставляем стандартный путь
    project_root_path: /home/user/my_flask_project
    app_port: 5000

  tasks:
    - name: Убедиться, что python3-apt, python3-pip, git и основные Python-библиотеки установлены и система обновлена (raw)
      # Эта raw-задача устанавливает все необходимое через apt.
      # Убираем все зависимости из отдельной apt-задачи, так как эта raw-команда справится со всем.
      raw: |
        sudo apt update
        sudo apt install -y python3-apt python3-pip git python3-setuptools python3-wheel python3-six
        sudo apt upgrade -y
        sudo apt autoremove -y
      args:
        warn: no
      changed_when: true

    # --- УДАЛЯЕМ ЭТУ ЗАДАЧУ, ПОТОМУ ЧТО ЕЁ ФУНКЦИОНАЛ ПЕРЕНЕСЁН В ПЕРВУЮ RAW-ЗАДАЧУ ---
    # - name: Установка необходимых Python-пакетов для Ansible через apt
    #   ansible.builtin.apt:
    #     name:
    #       - python3-setuptools
    #       - python3-wheel
    #       - python3-six
    #     state: present
    #     update_cache: yes
    # --- КОНЕЦ УДАЛЯЕМОЙ ЗАДАЧИ ---

    - name: Установка Docker (raw)
      raw: |
        sudo apt-get update
        sudo apt-get install -y ca-certificates curl gnupg lsb-release
        sudo mkdir -p /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu noble stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
      args:
        warn: no
      changed_when: true

    - name: Добавление пользователя 'user' в группу docker
      ansible.builtin.user:
        name: user
        groups: docker
        append: yes

    - name: Удаление существующей директории проекта Flask для чистого клонирования (raw)
      raw: sudo rm -rf {{ project_root_path }}
      args:
        warn: no
      changed_when: true

    - name: Создание директории проекта с владельцем 'user' для клонирования (raw)
      raw: sudo mkdir -p {{ project_root_path }} && sudo chown user:user {{ project_root_path }} && sudo chmod 0755 {{ project_root_path }}
      args:
        warn: no
      changed_when: true

    - name: Клонирование репозитория Flask-приложения (используя raw)
      raw: sudo -H -u user git clone https://github.com/DelayDelo123/my_flask_project.git {{ project_root_path }} # <--- ЗАМЕНИТЕ НА СВОЙ РЕПОЗИТОРИЙ!
      args:
        warn: no
      changed_when: true

    - name: Запуск Docker Compose (сборка и запуск контейнеров)
      ansible.builtin.shell: "docker compose up -d --build"
      args:
        chdir: "{{ project_root_path }}"
        warn: no
      become_user: user
      changed_when: true

    - name: Проверка статуса контейнеров (для отладки, не обязательно в продакшене)
      ansible.builtin.shell: "docker ps"
      args:
        warn: no
      become_user: user
      register: docker_ps_output
      changed_when: false

    - name: Вывод статуса контейнеров
      ansible.builtin.debug:
        var: docker_ps_output.stdout_lines
