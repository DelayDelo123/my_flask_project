# Используем официальный образ Python 3.9 на базе Debian Buster
FROM python:3.9-slim-buster

# Устанавливаем рабочую директорию внутри контейнера
# Все последующие команды будут выполняться относительно этой директории
WORKDIR /app

# Копируем файл requirements.txt из вашей локальной папки в /app внутри контейнера
# и устанавливаем все зависимости из него.
# Использование --no-cache-dir уменьшает размер образа.
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Копируем весь остальной код вашего приложения (включая app.py)
# из вашей локальной папки в /app внутри контейнера
COPY . .

# Указываем, какой порт будет слушать ваше Flask-приложение внутри контейнера.
# Это информационная инструкция, она не "открывает" порт на хосте.
EXPOSE 5000

# Команда, которая будет выполняться при запуске контейнера.
# Запускает ваше Flask-приложение на всех интерфейсах (0.0.0.0) на порту 5000.
# Убедитесь, что ваш основной файл Flask называется 'app.py' или измените FLASK_APP в docker-compose.yml
CMD ["flask", "run", "--host=0.0.0.0", "--port=5000"]
